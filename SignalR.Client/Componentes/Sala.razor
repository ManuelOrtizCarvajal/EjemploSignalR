<style>
    .tic-tac-toe td{
        width: 60px;
        height: 60px;
        border: 1px solid #000;
        text-align: center;
        vertical-align: middle;
        font-size: 24px!important;
        cursor: pointer;
    }
</style>

@if (CurrentRoom is not null)
{
    <h3>@CurrentRoom.RoomName</h3>

    if (CurrentRoom.Players.Count < 2)
    {
        <h4>Esperando que se una otro jugador...</h4>
    }

    if (!CurrentRoom.Game.GameStarted && CurrentRoom.Game.PlayerXId !=myPlayerId && CurrentRoom.Players.Count == 2)
    {
        <h4>Esperando que el otro jugador inicie la partida...</h4>
    }

    if (CurrentRoom.Game.GameOver && !CurrentRoom.Game.IsDraw)
    {
        <h4>Game Over! Ganador: @CurrentRoom.Game.Winner</h4>
    }

    if (CurrentRoom.Game.GameOver && CurrentRoom.Game.IsDraw)
    {
        <h4>Game Over! Empate!</h4>
    }

    if ((!CurrentRoom.Game.GameStarted || CurrentRoom.Game.GameOver) && CurrentRoom.Game.PlayerXId == myPlayerId && CurrentRoom.Players.Count == 2)
    {
        <button @onclick="StartGame">Iniciar Juego</button>
    }

    if (CurrentRoom.Game.GameStarted)
    {
        <h4>Es turno de la @CurrentRoom.Game.CurrentPlayerSimbol</h4>
        <span>Jugando actualmente: @CurrentRoom.Players[0].Name (X), @CurrentRoom.Players[1].Name (O)</span>

        <table class="tic-tac-toe">
            @for (int row = 0; row < 3; row++)
            {
                <tr>
                    @for (int col = 0; col < 3; col++)
                    {
                        var r = row;
                        var c = col;
                        <td @onclick="() => MakeMove(r,c)">
                            @CurrentRoom.Game.Board[r][c]
                        </td>
                    }
                </tr>
            }
        </table>

        @if (!IsMyTurn() && !CurrentRoom.Game.GameOver)
        {
            <p>Esperando la jugada del enemigo...</p>
        }
    }
}

@code {
    [CascadingParameter]
    public HubConnection? hubConnection { get; set; }
    [Parameter]
    public GameRoom? CurrentRoom { get; set; }
    private string? myPlayerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (hubConnection is null || CurrentRoom is null || hubConnection.ConnectionId is null)
            return;

        myPlayerId = hubConnection.ConnectionId;

        hubConnection?.On<Player>("PlayerJoined", player =>
        {
            CurrentRoom.Players.Add(player);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GameRoom>("UpdateGame", serverRoom =>
        {
            CurrentRoom = serverRoom;
            InvokeAsync(StateHasChanged);
        });
    }

    async Task StartGame()
    {
        if (hubConnection is null || CurrentRoom is null)
            return;

        await hubConnection.SendAsync("StartGame", CurrentRoom.RoomId);
    }

    private async Task MakeMove(int row, int col)
    {
        if (IsMyTurn() && CurrentRoom is not null && CurrentRoom.Game.GameStarted && !CurrentRoom.Game.GameOver && hubConnection is not null)
        {
            await hubConnection.SendAsync("MakeMove", CurrentRoom.RoomId, row, col, myPlayerId);
        }
    }

    private bool IsMyTurn()
    {
        if (CurrentRoom is not null)
            return myPlayerId == CurrentRoom.Game.CurrentPlayerId;

        return false;
    }
}
